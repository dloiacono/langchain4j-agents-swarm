package com.github.dloiacono.ai.agents.rag;

import dev.langchain4j.agent.tool.Tool;

import java.util.List;

/**
 * RAG (Retrieval-Augmented Generation) tool that allows agents to retrieve
 * relevant information from previously generated outputs using a simplified
 * text-based search approach.
 */
public class RAGTool {
    
    public RAGTool() {
        // Initialize by indexing existing files
        SimpleRAGStore.indexAllGeneratedFiles();
    }
    
    /**
     * Searches for relevant information from previously generated outputs.
     * This helps agents understand what has been created before and build upon it.
     * 
     * @param query The search query describing what information is needed
     * @return A formatted string containing the most relevant information found (max 5 results)
     */
    @Tool("Search for relevant information from previously generated project outputs. " +
          "Use this to understand what has been created before, find existing code, " +
          "architecture decisions, requirements, or any other generated content. Returns up to 5 most relevant results.")
    public String searchGeneratedContent(String query) {
        int maxResults = 5; // Fixed to 5 results to avoid method overloading issues
        
        try {
            // Search for similar content using simple text matching
            List<SimpleRAGStore.SearchResult> results = SimpleRAGStore.search(query, maxResults);
            
            if (results.isEmpty()) {
                return "No relevant information found for query: " + query;
            }
            
            // Format results
            StringBuilder result = new StringBuilder();
            result.append("Found ").append(results.size()).append(" relevant results for: ").append(query).append("\n\n");
            
            for (int i = 0; i < results.size(); i++) {
                SimpleRAGStore.SearchResult searchResult = results.get(i);
                SimpleRAGStore.DocumentSegment segment = searchResult.getSegment();
                
                result.append("Result ").append(i + 1).append(" (relevance: ")
                      .append(String.format("%.2f", searchResult.getRelevanceScore())).append("):\n");
                
                // Add metadata
                if (segment.getFileName() != null) {
                    result.append("Source: ").append(segment.getFileName()).append("\n");
                }
                if (segment.getGeneratedBy() != null && !segment.getGeneratedBy().equals("unknown")) {
                    result.append("Generated by: ").append(segment.getGeneratedBy()).append("\n");
                }
                
                result.append("Content:\n").append(segment.getContent()).append("\n");
                result.append("---\n\n");
            }
            
            return result.toString();
            
        } catch (Exception e) {
            return "Error searching generated content: " + e.getMessage();
        }
    }
    
    /**
     * Lists all files that have been indexed in the RAG system.
     * Useful for understanding what content is available.
     */
    @Tool("List all files that have been indexed in the knowledge base. " +
          "This shows what generated content is available for retrieval.")
    public String listIndexedFiles() {
        try {
            List<String> indexedFiles = SimpleRAGStore.getIndexedFiles();
            
            if (indexedFiles.isEmpty()) {
                return "No files have been indexed yet. Generate some content first, then it will be automatically indexed.";
            }
            
            StringBuilder result = new StringBuilder();
            result.append("Indexed files in knowledge base (").append(indexedFiles.size()).append(" files):\n\n");
            
            for (String fileName : indexedFiles) {
                result.append("- ").append(fileName).append("\n");
            }
            
            return result.toString();
            
        } catch (Exception e) {
            return "Error listing indexed files: " + e.getMessage();
        }
    }
    
    /**
     * Manually triggers indexing of all files in the generated-project directory.
     * Useful when new files have been created and need to be indexed.
     */
    @Tool("Manually refresh the knowledge base by re-indexing all generated files. " +
          "Use this after generating new content to make it searchable.")
    public String refreshKnowledgeBase() {
        try {
            SimpleRAGStore.indexAllGeneratedFiles();
            return "Knowledge base has been refreshed. All files in the generated-project directory have been re-indexed.";
        } catch (Exception e) {
            return "Error refreshing knowledge base: " + e.getMessage();
        }
    }
}
